{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx","path":"/blog/emacsd","result":{"data":{"post":{"__typename":"MdxPost","slug":"/blog/emacsd","title":"Spacemacs Daemon on Mac","date":"22.11.2020","tags":[{"name":"spacemacs","slug":"spacemacs"},{"name":"tools","slug":"tools"},{"name":"editor","slug":"editor"}],"description":null,"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Spacemacs Daemon on Mac\",\n  \"date\": \"2020-11-22T00:00:00.000Z\",\n  \"slug\": \"/blog/emacsd\",\n  \"tags\": [\"spacemacs\", \"tools\", \"editor\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component '\" + name + \"' was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, mdx(\"a\", _extends({\n    parentName: \"em\"\n  }, {\n    \"href\": \"#daemon-start\"\n  }), \"Skip\"), \" the backstory\")), mdx(\"p\", null, \"I've been a loyal vim user for over 3 years now! I spent countless hours learning shortcuts and workflows and it has been of the most effective improments in my workflow!\"), mdx(\"p\", null, \"My loyalty to vim started to waver when I started coding in Clojure, Vim is just terrible at it. It does not jump to definitions, execute code in a repl or effectively handle parenthesis. It has also become really slow with all the packages I've added to it (don't get me started on package management in vim!).\"), mdx(\"p\", null, \"So, I started using IntelliJ IDE for clojure and things were pretty good, the IDE is fast and has great tooling for the language (thanks Cursive). My only complaints with the IDE are:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"I have to buy a different license for every language I want support for\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"IntelliJ is a resource hog. It, paired with chrome can bring the mightiest of computers down\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"It's not useful for minor text editing, I still had to use Vim for it.\")), mdx(\"p\", null, \"I was still in search for the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"theory of everything\"), \" equivalent of IDEs. A single editor to rule them all!\\nAnd then I found out spacemacs! It promised to solve all my problems\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"It is multithreaded, so can parallely run my repl and evaluate code\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Has the concept of major mode, so not all layers are loaded at once\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Is open sourced, Open source FTW!!\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"The evil mode has all the vim bindings\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Is built on emacs and so has great support for every language under the sun!\")), mdx(\"p\", null, \"But I still did not use it!\"), mdx(\"p\", null, \"Why! you ask?\\nWell, it took more than 10 seconds to startup, and I cannot wait for 8 seconds everytime I wanted to edit a line in a file.\"), mdx(\"p\", null, \"So I stuck with vim, but today is the day I move to the dark side!\\n\", mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://media.giphy.com/media/8SxGru3XzElqg/giphy.gif\",\n    \"alt\": \"Power of the Dark Side\"\n  }))), mdx(\"a\", {\n    name: \"daemon-start\"\n  }, \" \"), mdx(\"h2\", null, \"Spacemacs Daemon\"), mdx(\"p\", null, \"I setup a spacemacs Daemon on my mac and it has solved all my issues. I've finally moved to spacemacs completely.\"), mdx(\"p\", null, \"Whenever you run \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"emacs\"), \" in your terminal, it opens up a new process of emacs and loads all the packages and initializes the editor, which is the root cause of the slowness.\"), mdx(\"p\", null, \"We can skip this by making all our frames (windows) talk to the same emacs sever, which is initialised only once. To do this we'll run emacs in daemon mode\"), mdx(\"h3\", null, \"Prequesites\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Emacs version > 23.1\"), \"\\nThe default version of emacs shipped with OSX is really old and will not support running emacs in daemon mode. So \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://wikemacs.org/wiki/Installing_Emacs_on_OS_X\"\n  }), \"update\"), \" the version\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"(Optional) Install Spacemacs.\"), \"\\nHaving spacemacs configured is not necessary, since its built on emacs, this process should work just with Emacs, but if you're migrating from vim I strongly recommend using spacemacs. This is a good \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/syl20bnr/spacemacs/blob/master/doc/BEGINNERS_TUTORIAL.org\"\n  }), \"resource\"), \" for installing and getting started. \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"I would suggest using the develop branch\")), mdx(\"h3\", null, \"Running it manually\"), mdx(\"p\", null, \"In your terminal run\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sh\"\n  }), \"emacs --daemon &\\n\")), mdx(\"p\", null, \"This will start a daemon process in the background which the clients can connect to. Now start a client, to edit your files\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sh\"\n  }), \"emacsclient -c .\\n\")), mdx(\"p\", null, \"Now, this is all there is and it should work for you unless you are me and forget to start the daemon or repeatedly close it accidentally \\uD83D\\uDE44. There has to be a better way!!\"), mdx(\"h3\", null, \"Running it as a service on startup\"), mdx(\"p\", null, \"Well, there is! We can configure a launchctl service which starts the daemon on startup. To configure the service, add this to a file to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/Users/admin/Library/LaunchAgents\"), \" directory\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-xml:title=gnu.emacs.daemon.plist\"\n  }), \"    <?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n    <!DOCTYPE plist PUBLIC \\\"-//Apple//DTD PLIST 1.0//EN\\\"\\n        \\\"http://www.apple.com/DTDs/PropertyList-1.0.dtd\\\">\\n     <plist version=\\\"1.0\\\">\\n      <dict>\\n        <key>Label</key>\\n        <string>gnu.emacs.daemon</string>\\n        <key>ProgramArguments</key>\\n        <array>\\n          <string>/Applications/Emacs.app/Contents/MacOS/Emacs</string>\\n          <string>--daemon</string>\\n        </array>\\n       <key>RunAtLoad</key>\\n       <true/>\\n       <key>ServiceDescription</key>\\n       <string>Gnu Emacs Daemon</string>\\n      </dict>\\n    </plist>\\n\")), mdx(\"p\", null, \"Once you save the file, load this service in launchctl\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sh\"\n  }), \"launchctl load -w /Users/admin/Library/LaunchAgents/gnu.emacs.daemon.plist\\n\")), mdx(\"p\", null, \"This will load the service and enable it!\"), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Note: Do not close your emacs frames with \", mdx(\"inlineCode\", {\n    parentName: \"em\"\n  }, \"spc-q-q\"), \" this will stop the daemon, and future invocations of emacsclient will error out. Instead start using \", mdx(\"inlineCode\", {\n    parentName: \"em\"\n  }, \"spc-q-f\"), \" i.e. quit the frame.\")), mdx(\"p\", null, \"If you want to restart the daemon, run\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sh\"\n  }), \"ID=`id -u $(whoami)`\\nlaunchctl kickstart -k gui/$ID/gnu.emacs.daemon\\n\")), mdx(\"p\", null, \"It took me several weeks to sit and figure it out, I hope this helped you, let me know if it did! It'll make my day!\"));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"Skip  the backstory I've been a loyal vim user for over 3 years now! I spent countless hours learning shortcuts and workflows and it hasâ€¦","timeToRead":2,"banner":null}},"pageContext":{"slug":"/blog/emacsd","formatString":"DD.MM.YYYY"}},"staticQueryHashes":["318001574","3787687951","3787687951"]}